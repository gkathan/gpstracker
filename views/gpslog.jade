include gpstracker_menu
//script(src="/javascripts/gpstracker/gpslog_client.js")

block content
	div.panel(style=" position: relative;padding: 20px 40px 10px;display: block;background-color:white;;width:500px;text-align: center;margin: 10px auto;")
		div.form-group
			div.input-group.date(id="fromdate" )
				input.form-control(id="from" type="text" style="width:200px")
				span.input-group-addon 
					span.glyphicon.glyphicon-calendar 
					span(style="font-size:10px") ::from date
						

			div.input-group.date(id="todate" )
				input.form-control(id="to" type="text" style="width:200px")
				span.input-group-addon 
					span.glyphicon.glyphicon-calendar 
					span(style="font-size:10px")  ::to date
			button.btn.btn-primary.btn-xs(id="submitsearch" ) Search 
			button.btn.btn-info.btn-xs(id="submitlatest" ) Latest Position

	div(id="map-canvas" style="width:500px;margin:auto; height:600px")
	
	div.panel(style=" position: relative;display: block;background-color:white;;width:500px;text-align: center;margin: 10px auto;")
		.panel-heading
			h3.panel-title GPSLOG 
			span(id="distance")
		.panel-body
			table.table.table-striped.table-hover.table-condensed(id="gpslogTable" style="font-size:10px")
				thead
					tr
						th(style="width:110px") dateTime
						th(style="width:60px") longitude
						th(style="width:60px") latitude
						th(style="width:50px") speed
						th(style="width:40px") head
						th(style="width:40px") alt
						th(style="width:50px") dist
						th sat
						th ID
				tbody

script.
	 $(function () {
		$('#fromdate').datetimepicker({keepOpen:false,format:"ddd, DD MMM YYYY, HH:mm:ss"});
		$('#todate').datetimepicker({keepOpen:false,format:"ddd, DD MMM YYYY, HH:mm:ss"});
		$('#submitsearch').click(function(){
			var _from = $('#from').val();
			var _to = $('#to').val();
			loadGpsLog(_from,_to,function(_distance){
				$('#distance').html("distance: <b>"+_distance/1000+" km");
			});
		});
		// default to date is now()
		$('#to').val(moment(new Date()).format("ddd, DD MMM YYYY, HH:mm:ss"));
		$('#submitlatest').click(function(){
			_cleanLogsAndMarkers()
			loadGpsLatest();
		});
	});

	var markers;
	
	var realtimeMarkers=[];
	var logPath;

	google.maps.event.addDomListener(window, 'load', initialize);
	
	function initialize() {
		var mapOptions = {
				zoom: 16
		};
		map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);
		loadGpsLatest();
		
		// draw homebase fence circle
		var homebase = new google.maps.LatLng("#{fenceLat}","#{fenceLng}")
		
		var options = {
			strokeColor: '#FF0000',
			strokeOpacity: 0.8,
			strokeWeight: 2,
			fillColor: '#FF0000',
			fillOpacity: 0.1,
			map: map,
			center: homebase,
			radius: #{fenceRadius}
		};
		// Add the circle for this fence
		var homeCircle = new google.maps.Circle(options);
	}
	
	// websocket handling
	var socket = io.connect('ws://#{ip}:#{wsPort}');

	socket.on('gpslog', function(log){
		console.log(log);
		//document.getElementById("log").innerHTML += "<br>"+JSON.stringify(log);
		_addRealtimeGpsLog(log);
	});
	
	
		//realtime logger
	function _addRealtimeGpsLog(g){
		_appendRow(g);
		// re-color the old realtime markers
		for (var m in realtimeMarkers){
			console.log("....trying to set green marker for marker: "+realtimeMarkers[m]);
			realtimeMarkers[m].setIcon('http://maps.google.com/mapfiles/ms/micons/green.png')
		}
		// only the latest is yellow !
		var marker = _appendMarker(g,"yellow");
		realtimeMarkers.push(marker);
		console.log("pushed marker: "+marker+" into realtimeMarkers array: length: "+realtimeMarkers.length);
		
		// center around latest marker
		map.setCenter(marker.getPosition());
	}



	
	function loadGpsLog(from,to,callback){
		var bounds = new google.maps.LatLngBounds();
		var _distance =0;
		
		$.getJSON( "/api/tracker/rest/gpslog?n=dateTime&o=range&p="+from+";"+to,function(data){
			console.log("data: "+JSON.stringify(data));
			for (var g in data){
				_appendRow(data[g]);
				 if (data[g].distance) _distance+=parseInt(data[g].distance);
			}
			var _markers = drawMarkers(data,false);
			
			for(i=0;i<_markers.length;i++) {
				 bounds.extend(_markers[i].position);
			}
			drawPath(_markers,'steelblue');
			
			//var _distance = _calculateDistance(data);
			console.log("[OVERALL DISTANCE]: "+_distance/1000+" km");
			
			map.fitBounds(bounds);
			markers = _markers;
			callback(_distance);
		});
	}
	
	function loadGpsLatest(){
		$.getJSON( "/api/tracker/rest/gpslog?n=dateTime&o=latest",function(data){
			console.log("latest position: "+JSON.stringify(data));
			var marker = _appendMarker(data,"yellow");
			console.log("*marker: "+marker);
			marker.setMap(map);
			map.setCenter(marker.getPosition());
			map.setZoom(16);
			realtimeMarkers.push(marker);
			_appendRow(data);
		});
	}
	
	function _cleanLogsAndMarkers(){
			// clean all markers
			for (var m in markers){
				markers[m].setMap(null);
			}
			
			for (var r in realtimeMarkers){
				realtimeMarkers[r].setMap(null);
			}
			// clean pathes
			if (logPath) logPath.setMap(null);
			
			// clean table
			$('#gpslogTable tbody').empty();
	}
	
	function _appendRow(g){
		var _row = "<tr>";
		_row+="<td style='text-align:left;vertical-align:middle'><a href='http://maps.google.com/maps?q="+g.latitude+","+g.longitude+"' target='_new'>"+moment(g.dateTime).format("YYYY-MM-DD HH:mm:ss")+"</a></td>";
		_row+="<td style='text-align:left;vertical-align:middle'>"+g.longitude+"</td>";
		_row+="<td style='text-align:left;vertical-align:middle'>"+g.latitude+"</td>";
		_row+="<td style='text-align:left;vertical-align:middle'>"+g.speed+" km/h</td>";
		_row+="<td style='text-align:left;vertical-align:middle'>"+g.heading+"Â°</td>";
		_row+="<td style='text-align:left;vertical-align:middle'>"+g.altitude+"m</td>";
		_row+="<td style='text-align:left;vertical-align:middle'>"+Math.round(g.distance)+"m</td>";
		_row+="<td style='text-align:left;vertical-align:middle'>"+g.satellite+" </td>";
		_row+="<td style='text-align:left;vertical-align:middle'>"+g.eventID+" </td>";
		_row+="</tr>";
		
		$("#gpslogTable > tbody").append(_row);
	}
	
	
	
	function _createMarker(g){
		var _position = new google.maps.LatLng(g.latitude, g.longitude);
			var marker = new google.maps.Marker({
				position: _position,
				title: moment(g.dateTime).format("YYYY-MM-DD HH:mm:ss") +' \nspeed: '+g.speed+'\ndistance: '+g.distance+'\neventID: '+g.eventID
		});
		return marker;
	}
	
	
	// realtime marker
	function _appendMarker(g,color){
		console.log("_appendMarker called: "+JSON.stringify(g)+" color:"+color);
		var marker = _createMarker(g);
		marker.setIcon('http://maps.google.com/mapfiles/ms/micons/'+color+'.png')
		marker.setMap(map);
		return marker;
	}
	
	function _calculateDistance(log){
		var _distance = 0;
		for (g in log){
			var _g = log[g];
			 if (_g.distance) _distance+=parseInt(_g.distance);
		}
		return _distance;
	}
	
	function drawMarkers(log,markersEnabled){
		var _markers=[];
		
		for (g in log){
			var _g = log[g];
			var marker = _createMarker(_g);
			
				if (g==0){
					marker.setIcon('http://maps.google.com/mapfiles/dd-end.png');
					marker.setMap(map);
				} 
				else if (g==log.length-1){
					marker.setIcon('http://maps.google.com/mapfiles/dd-start.png');
					marker.setMap(map);
				} 
				else if (markersEnabled){
				 	marker.setIcon('http://maps.google.com/mapfiles/ms/micons/blue.png')
					marker.setMap(map);
				}
			_markers.push(marker);
		}
		return _markers;
	}
	
	
	function drawPath(markers,color){
		var coordinates=[];
		
		for (var m in markers){
			coordinates.push(markers[m].position);
		}
		
		logPath = new google.maps.Polyline({
			path: coordinates,
			geodesic: true,
			strokeColor: color,
			strokeOpacity: 0.8,
			strokeWeight: 5
			});
		logPath.setMap(map);
	}
